{
  System.Private.CoreLib, Version=x.x.x.x, T:System.Char: {
    Accessibility: Public,
    Attributes: [
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.Runtime.InteropServices.ClassInterfaceAttribute,
        Id: T:System.Runtime.InteropServices.ClassInterfaceAttribute,
        Kind: Attribute,
        Name: ClassInterfaceAttribute
      },
      {
        FullName: System.Runtime.InteropServices.ComVisibleAttribute,
        Id: T:System.Runtime.InteropServices.ComVisibleAttribute,
        Kind: Attribute,
        Name: ComVisibleAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      }
    ],
    BaseTypes: [
      T:System.ValueType,
      T:System.Object
    ],
    FullName: System.Private.CoreLib, Version=x.x.x.x, T:System.Char,
    Id: T:System.Char,
    Implementations: [
      T:System.IBinaryIntegerParseAndFormatInfo`1,
      T:System.IUtfChar`1,
      T:System.Numerics.IUnsignedNumber`1,
      T:System.Numerics.IMinMaxValue`1,
      T:System.Numerics.IBinaryInteger`1,
      T:System.Numerics.IShiftOperators`3,
      T:System.Numerics.IBinaryNumber`1,
      T:System.Numerics.INumber`1,
      T:System.Numerics.INumberBase`1,
      T:System.IUtf8SpanParsable`1,
      T:System.IUtf8SpanFormattable,
      T:System.Numerics.IUnaryNegationOperators`2,
      T:System.Numerics.IUnaryPlusOperators`2,
      T:System.Numerics.ISubtractionOperators`3,
      T:System.ISpanParsable`1,
      T:System.IParsable`1,
      T:System.Numerics.IMultiplyOperators`3,
      T:System.Numerics.IMultiplicativeIdentity`2,
      T:System.Numerics.IIncrementOperators`1,
      T:System.Numerics.IDivisionOperators`3,
      T:System.Numerics.IDecrementOperators`1,
      T:System.Numerics.IAdditiveIdentity`2,
      T:System.Numerics.IAdditionOperators`3,
      T:System.Numerics.IModulusOperators`3,
      T:System.Numerics.IComparisonOperators`3,
      T:System.Numerics.IEqualityOperators`3,
      T:System.Numerics.IBitwiseOperators`3,
      T:System.ISpanFormattable,
      T:System.IFormattable,
      T:System.IConvertible,
      T:System.IEquatable`1,
      T:System.IComparable`1,
      T:System.IComparable
    ],
    InheritedMembers: [
      M:System.ValueType.Equals(System.Object),
      M:System.ValueType.CanCompareBitsOrUseFastGetHashCode(System.Runtime.CompilerServices.MethodTable*),
      M:System.ValueType.CanCompareBitsOrUseFastGetHashCodeHelper(System.Runtime.CompilerServices.MethodTable*),
      M:System.ValueType.GetHashCode,
      M:System.ValueType.GetHashCodeStrategy(System.Runtime.CompilerServices.MethodTable*,System.Runtime.CompilerServices.ObjectHandleOnStack,System.UInt32@,System.UInt32@,System.Runtime.CompilerServices.MethodTable*@),
      M:System.ValueType.ToString,
      M:System.ValueType.{CanCompareBitsOrUseFastGetHashCodeHelper}g____PInvoke|2_0(System.Runtime.CompilerServices.MethodTable*),
      M:System.ValueType.{GetHashCodeStrategy}g____PInvoke|5_0(System.Runtime.CompilerServices.MethodTable*,System.Runtime.CompilerServices.ObjectHandleOnStack,System.UInt32*,System.UInt32*,System.Runtime.CompilerServices.MethodTable**),
      M:System.Object.GetType,
      M:System.Object.MemberwiseClone,
      M:System.Object.Finalize,
      M:System.Object.ToString,
      M:System.Object.Equals(System.Object),
      M:System.Object.Equals(System.Object,System.Object),
      M:System.Object.ReferenceEquals(System.Object,System.Object),
      M:System.Object.GetHashCode
    ],
    IsNested: false,
    IsRecord: false,
    Kind: Struct,
    Members: [
      F:System.Char.m_value,
      F:System.Char.MaxValue,
      F:System.Char.MinValue,
      M:System.Char.IsLatin1(System.Char),
      M:System.Char.IsAscii(System.Char),
      M:System.Char.GetLatin1UnicodeCategory(System.Char),
      M:System.Char.GetHashCode,
      M:System.Char.Equals(System.Object),
      M:System.Char.Equals(System.Char),
      M:System.Char.CompareTo(System.Object),
      M:System.Char.CompareTo(System.Char),
      M:System.Char.ToString,
      M:System.Char.ToString(System.IFormatProvider),
      M:System.Char.ToString(System.Char),
      M:System.Char.System#ISpanFormattable#TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Char.System#IUtf8SpanFormattable#TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Char.System#IFormattable#ToString(System.String,System.IFormatProvider),
      M:System.Char.Parse(System.String),
      M:System.Char.Parse(System.ReadOnlySpan{System.Char}),
      M:System.Char.TryParse(System.String,System.Char@),
      M:System.Char.TryParse(System.ReadOnlySpan{System.Char},System.Char@),
      M:System.Char.IsAsciiLetter(System.Char),
      M:System.Char.IsAsciiLetterLower(System.Char),
      M:System.Char.IsAsciiLetterUpper(System.Char),
      M:System.Char.IsAsciiDigit(System.Char),
      M:System.Char.IsAsciiLetterOrDigit(System.Char),
      M:System.Char.IsAsciiHexDigit(System.Char),
      M:System.Char.IsAsciiHexDigitUpper(System.Char),
      M:System.Char.IsAsciiHexDigitLower(System.Char),
      M:System.Char.IsDigit(System.Char),
      M:System.Char.IsBetween(System.Char,System.Char,System.Char),
      M:System.Char.IsBetween(System.Globalization.UnicodeCategory,System.Globalization.UnicodeCategory,System.Globalization.UnicodeCategory),
      M:System.Char.CheckLetter(System.Globalization.UnicodeCategory),
      M:System.Char.IsLetter(System.Char),
      M:System.Char.IsWhiteSpaceLatin1(System.Char),
      M:System.Char.IsWhiteSpace(System.Char),
      M:System.Char.IsUpper(System.Char),
      M:System.Char.IsLower(System.Char),
      M:System.Char.CheckPunctuation(System.Globalization.UnicodeCategory),
      M:System.Char.IsPunctuation(System.Char),
      M:System.Char.CheckLetterOrDigit(System.Globalization.UnicodeCategory),
      M:System.Char.IsLetterOrDigit(System.Char),
      M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo),
      M:System.Char.ToUpper(System.Char),
      M:System.Char.ToUpperInvariant(System.Char),
      M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo),
      M:System.Char.ToLower(System.Char),
      M:System.Char.ToLowerInvariant(System.Char),
      M:System.Char.GetTypeCode,
      M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToChar(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToByte(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider),
      M:System.Char.IsControl(System.Char),
      M:System.Char.IsControl(System.String,System.Int32),
      M:System.Char.IsDigit(System.String,System.Int32),
      M:System.Char.IsLetter(System.String,System.Int32),
      M:System.Char.IsLetterOrDigit(System.String,System.Int32),
      M:System.Char.IsLower(System.String,System.Int32),
      M:System.Char.CheckNumber(System.Globalization.UnicodeCategory),
      M:System.Char.IsNumber(System.Char),
      M:System.Char.IsNumber(System.String,System.Int32),
      M:System.Char.IsPunctuation(System.String,System.Int32),
      M:System.Char.CheckSeparator(System.Globalization.UnicodeCategory),
      M:System.Char.IsSeparatorLatin1(System.Char),
      M:System.Char.IsSeparator(System.Char),
      M:System.Char.IsSeparator(System.String,System.Int32),
      M:System.Char.IsSurrogate(System.Char),
      M:System.Char.IsSurrogate(System.String,System.Int32),
      M:System.Char.CheckSymbol(System.Globalization.UnicodeCategory),
      M:System.Char.IsSymbol(System.Char),
      M:System.Char.IsSymbol(System.String,System.Int32),
      M:System.Char.IsUpper(System.String,System.Int32),
      M:System.Char.IsWhiteSpace(System.String,System.Int32),
      M:System.Char.GetUnicodeCategory(System.Char),
      M:System.Char.GetUnicodeCategory(System.String,System.Int32),
      M:System.Char.GetNumericValue(System.Char),
      M:System.Char.GetNumericValue(System.String,System.Int32),
      M:System.Char.IsHighSurrogate(System.Char),
      M:System.Char.IsHighSurrogate(System.String,System.Int32),
      M:System.Char.IsLowSurrogate(System.Char),
      M:System.Char.IsLowSurrogate(System.String,System.Int32),
      M:System.Char.IsSurrogatePair(System.String,System.Int32),
      M:System.Char.IsSurrogatePair(System.Char,System.Char),
      M:System.Char.ConvertFromUtf32(System.Int32),
      M:System.Char.ConvertToUtf32(System.Char,System.Char),
      M:System.Char.ConvertToUtf32_ThrowInvalidArgs(System.UInt32),
      M:System.Char.ConvertToUtf32(System.String,System.Int32),
      M:System.Char.System#Numerics#IAdditionOperators{System#Char,System#Char,System#Char}#op_Addition(System.Char,System.Char),
      M:System.Char.System#Numerics#IAdditionOperators{System#Char,System#Char,System#Char}#op_CheckedAddition(System.Char,System.Char),
      M:System.Char.System#Numerics#IBinaryInteger{System#Char}#LeadingZeroCount(System.Char),
      M:System.Char.System#Numerics#IBinaryInteger{System#Char}#PopCount(System.Char),
      M:System.Char.System#Numerics#IBinaryInteger{System#Char}#RotateLeft(System.Char,System.Int32),
      M:System.Char.System#Numerics#IBinaryInteger{System#Char}#RotateRight(System.Char,System.Int32),
      M:System.Char.System#Numerics#IBinaryInteger{System#Char}#TrailingZeroCount(System.Char),
      M:System.Char.System#Numerics#IBinaryInteger{System#Char}#TryReadBigEndian(System.ReadOnlySpan{System.Byte},System.Boolean,System.Char@),
      M:System.Char.System#Numerics#IBinaryInteger{System#Char}#TryReadLittleEndian(System.ReadOnlySpan{System.Byte},System.Boolean,System.Char@),
      M:System.Char.System#Numerics#IBinaryInteger{System#Char}#GetShortestBitLength,
      M:System.Char.System#Numerics#IBinaryInteger{System#Char}#GetByteCount,
      M:System.Char.System#Numerics#IBinaryInteger{System#Char}#TryWriteBigEndian(System.Span{System.Byte},System.Int32@),
      M:System.Char.System#Numerics#IBinaryInteger{System#Char}#TryWriteLittleEndian(System.Span{System.Byte},System.Int32@),
      M:System.Char.System#Numerics#IBinaryNumber{System#Char}#IsPow2(System.Char),
      M:System.Char.System#Numerics#IBinaryNumber{System#Char}#Log2(System.Char),
      M:System.Char.System#Numerics#IBitwiseOperators{System#Char,System#Char,System#Char}#op_BitwiseAnd(System.Char,System.Char),
      M:System.Char.System#Numerics#IBitwiseOperators{System#Char,System#Char,System#Char}#op_BitwiseOr(System.Char,System.Char),
      M:System.Char.System#Numerics#IBitwiseOperators{System#Char,System#Char,System#Char}#op_ExclusiveOr(System.Char,System.Char),
      M:System.Char.System#Numerics#IBitwiseOperators{System#Char,System#Char,System#Char}#op_OnesComplement(System.Char),
      M:System.Char.System#Numerics#IComparisonOperators{System#Char,System#Char,System#Boolean}#op_LessThan(System.Char,System.Char),
      M:System.Char.System#Numerics#IComparisonOperators{System#Char,System#Char,System#Boolean}#op_LessThanOrEqual(System.Char,System.Char),
      M:System.Char.System#Numerics#IComparisonOperators{System#Char,System#Char,System#Boolean}#op_GreaterThan(System.Char,System.Char),
      M:System.Char.System#Numerics#IComparisonOperators{System#Char,System#Char,System#Boolean}#op_GreaterThanOrEqual(System.Char,System.Char),
      M:System.Char.System#Numerics#IDecrementOperators{System#Char}#op_Decrement(System.Char),
      M:System.Char.System#Numerics#IDecrementOperators{System#Char}#op_CheckedDecrement(System.Char),
      M:System.Char.System#Numerics#IDivisionOperators{System#Char,System#Char,System#Char}#op_Division(System.Char,System.Char),
      M:System.Char.System#Numerics#IEqualityOperators{System#Char,System#Char,System#Boolean}#op_Equality(System.Char,System.Char),
      M:System.Char.System#Numerics#IEqualityOperators{System#Char,System#Char,System#Boolean}#op_Inequality(System.Char,System.Char),
      M:System.Char.System#Numerics#IIncrementOperators{System#Char}#op_Increment(System.Char),
      M:System.Char.System#Numerics#IIncrementOperators{System#Char}#op_CheckedIncrement(System.Char),
      M:System.Char.System#Numerics#IModulusOperators{System#Char,System#Char,System#Char}#op_Modulus(System.Char,System.Char),
      M:System.Char.System#Numerics#IMultiplyOperators{System#Char,System#Char,System#Char}#op_Multiply(System.Char,System.Char),
      M:System.Char.System#Numerics#IMultiplyOperators{System#Char,System#Char,System#Char}#op_CheckedMultiply(System.Char,System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#Abs(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsCanonical(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsComplexNumber(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsEvenInteger(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsFinite(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsImaginaryNumber(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsInfinity(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsInteger(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsNaN(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsNegative(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsNegativeInfinity(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsNormal(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsOddInteger(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsPositive(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsPositiveInfinity(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsRealNumber(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsSubnormal(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#IsZero(System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#MaxMagnitude(System.Char,System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#MaxMagnitudeNumber(System.Char,System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#MinMagnitude(System.Char,System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#MinMagnitudeNumber(System.Char,System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#MultiplyAddEstimate(System.Char,System.Char,System.Char),
      M:System.Char.System#Numerics#INumberBase{System#Char}#Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Char.System#Numerics#INumberBase{System#Char}#Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Char.System#Numerics#INumberBase{System#Char}#TryConvertFromChecked``1(``0,System.Char@),
      M:System.Char.System#Numerics#INumberBase{System#Char}#TryConvertFromSaturating``1(``0,System.Char@),
      M:System.Char.System#Numerics#INumberBase{System#Char}#TryConvertFromTruncating``1(``0,System.Char@),
      M:System.Char.System#Numerics#INumberBase{System#Char}#TryConvertToChecked``1(System.Char,``0@),
      M:System.Char.System#Numerics#INumberBase{System#Char}#TryConvertToSaturating``1(System.Char,``0@),
      M:System.Char.System#Numerics#INumberBase{System#Char}#TryConvertToTruncating``1(System.Char,``0@),
      M:System.Char.System#Numerics#INumberBase{System#Char}#TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Char@),
      M:System.Char.System#Numerics#INumberBase{System#Char}#TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Char@),
      M:System.Char.System#IParsable{System#Char}#Parse(System.String,System.IFormatProvider),
      M:System.Char.System#IParsable{System#Char}#TryParse(System.String,System.IFormatProvider,System.Char@),
      M:System.Char.System#Numerics#IShiftOperators{System#Char,System#Int32,System#Char}#op_LeftShift(System.Char,System.Int32),
      M:System.Char.System#Numerics#IShiftOperators{System#Char,System#Int32,System#Char}#op_RightShift(System.Char,System.Int32),
      M:System.Char.System#Numerics#IShiftOperators{System#Char,System#Int32,System#Char}#op_UnsignedRightShift(System.Char,System.Int32),
      M:System.Char.System#ISpanParsable{System#Char}#Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Char.System#ISpanParsable{System#Char}#TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Char@),
      M:System.Char.System#Numerics#ISubtractionOperators{System#Char,System#Char,System#Char}#op_Subtraction(System.Char,System.Char),
      M:System.Char.System#Numerics#ISubtractionOperators{System#Char,System#Char,System#Char}#op_CheckedSubtraction(System.Char,System.Char),
      M:System.Char.System#Numerics#IUnaryNegationOperators{System#Char,System#Char}#op_UnaryNegation(System.Char),
      M:System.Char.System#Numerics#IUnaryNegationOperators{System#Char,System#Char}#op_CheckedUnaryNegation(System.Char),
      M:System.Char.System#Numerics#IUnaryPlusOperators{System#Char,System#Char}#op_UnaryPlus(System.Char),
      M:System.Char.System#IUtfChar{System#Char}#CastFrom(System.Byte),
      M:System.Char.System#IUtfChar{System#Char}#CastFrom(System.Char),
      M:System.Char.System#IUtfChar{System#Char}#CastFrom(System.Int32),
      M:System.Char.System#IUtfChar{System#Char}#CastFrom(System.UInt32),
      M:System.Char.System#IUtfChar{System#Char}#CastFrom(System.UInt64),
      M:System.Char.System#IUtfChar{System#Char}#CastToUInt32(System.Char),
      M:System.Char.System#IBinaryIntegerParseAndFormatInfo{System#Char}#IsGreaterThanAsUnsigned(System.Char,System.Char),
      M:System.Char.System#IBinaryIntegerParseAndFormatInfo{System#Char}#MultiplyBy10(System.Char),
      M:System.Char.System#IBinaryIntegerParseAndFormatInfo{System#Char}#MultiplyBy16(System.Char),
      M:System.Char.#ctor,
      P:System.Char.Latin1CharInfo,
      P:System.Char.System#Numerics#IAdditiveIdentity{System#Char,System#Char}#AdditiveIdentity,
      P:System.Char.System#Numerics#IBinaryNumber{System#Char}#AllBitsSet,
      P:System.Char.System#Numerics#IMinMaxValue{System#Char}#MinValue,
      P:System.Char.System#Numerics#IMinMaxValue{System#Char}#MaxValue,
      P:System.Char.System#Numerics#IMultiplicativeIdentity{System#Char,System#Char}#MultiplicativeIdentity,
      P:System.Char.System#Numerics#INumberBase{System#Char}#One,
      P:System.Char.System#Numerics#INumberBase{System#Char}#Radix,
      P:System.Char.System#Numerics#INumberBase{System#Char}#Zero,
      P:System.Char.System#IBinaryIntegerParseAndFormatInfo{System#Char}#IsSigned,
      P:System.Char.System#IBinaryIntegerParseAndFormatInfo{System#Char}#MaxDigitCount,
      P:System.Char.System#IBinaryIntegerParseAndFormatInfo{System#Char}#MaxHexDigitCount,
      P:System.Char.System#IBinaryIntegerParseAndFormatInfo{System#Char}#MaxValueDiv10,
      P:System.Char.System#IBinaryIntegerParseAndFormatInfo{System#Char}#OverflowMessage
    ],
    Modifiers: [
      ReadOnly
    ],
    Name: Char,
    NamespaceId: N:System,
    ParentId: N:System
  }
}