{
  System.Private.CoreLib, Version=8.0.0.0, T:System.Half: {
    Accessibility: Public,
    Attributes: [
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      },
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      },
      {
        FullName: System.Runtime.InteropServices.ClassInterfaceAttribute,
        Id: T:System.Runtime.InteropServices.ClassInterfaceAttribute,
        Kind: Attribute,
        Name: ClassInterfaceAttribute
      },
      {
        FullName: System.Runtime.InteropServices.ComVisibleAttribute,
        Id: T:System.Runtime.InteropServices.ComVisibleAttribute,
        Kind: Attribute,
        Name: ComVisibleAttribute
      },
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      }
    ],
    BaseTypes: [
      T:System.ValueType,
      T:System.Object
    ],
    FullName: System.Private.CoreLib, Version=8.0.0.0, T:System.Half,
    Id: T:System.Half,
    Implementations: [
      T:System.IBinaryFloatParseAndFormatInfo`1,
      T:System.Numerics.IMinMaxValue`1,
      T:System.Numerics.IBinaryFloatingPointIeee754`1,
      T:System.Numerics.IFloatingPointIeee754`1,
      T:System.Numerics.ITrigonometricFunctions`1,
      T:System.Numerics.IRootFunctions`1,
      T:System.Numerics.IPowerFunctions`1,
      T:System.Numerics.ILogarithmicFunctions`1,
      T:System.Numerics.IHyperbolicFunctions`1,
      T:System.Numerics.IFloatingPoint`1,
      T:System.Numerics.ISignedNumber`1,
      T:System.Numerics.IExponentialFunctions`1,
      T:System.Numerics.IFloatingPointConstants`1,
      T:System.Numerics.IBinaryNumber`1,
      T:System.Numerics.INumber`1,
      T:System.Numerics.INumberBase`1,
      T:System.IUtf8SpanParsable`1,
      T:System.IUtf8SpanFormattable,
      T:System.Numerics.IUnaryNegationOperators`2,
      T:System.Numerics.IUnaryPlusOperators`2,
      T:System.Numerics.ISubtractionOperators`3,
      T:System.ISpanParsable`1,
      T:System.IParsable`1,
      T:System.Numerics.IMultiplyOperators`3,
      T:System.Numerics.IMultiplicativeIdentity`2,
      T:System.Numerics.IIncrementOperators`1,
      T:System.Numerics.IDivisionOperators`3,
      T:System.Numerics.IDecrementOperators`1,
      T:System.Numerics.IAdditiveIdentity`2,
      T:System.Numerics.IAdditionOperators`3,
      T:System.Numerics.IModulusOperators`3,
      T:System.Numerics.IComparisonOperators`3,
      T:System.Numerics.IEqualityOperators`3,
      T:System.Numerics.IBitwiseOperators`3,
      T:System.IEquatable`1,
      T:System.IComparable`1,
      T:System.ISpanFormattable,
      T:System.IFormattable,
      T:System.IComparable
    ],
    InheritedMembers: [
      M:System.ValueType.Equals(System.Object),
      M:System.ValueType.CanCompareBits(System.Object),
      M:System.ValueType.GetHashCode,
      M:System.ValueType.ToString,
      M:System.Object.GetType,
      M:System.Object.MemberwiseClone,
      M:System.Object.Finalize,
      M:System.Object.ToString,
      M:System.Object.Equals(System.Object),
      M:System.Object.Equals(System.Object,System.Object),
      M:System.Object.ReferenceEquals(System.Object,System.Object),
      M:System.Object.GetHashCode
    ],
    IsNested: false,
    IsRecord: false,
    Kind: Struct,
    Members: [
      F:System.Half._value,
      M:System.Half.#ctor(System.UInt16),
      M:System.Half.#ctor(System.Boolean,System.UInt16,System.UInt16),
      M:System.Half.ExtractBiasedExponentFromBits(System.UInt16),
      M:System.Half.ExtractTrailingSignificandFromBits(System.UInt16),
      M:System.Half.op_LessThan(System.Half,System.Half),
      M:System.Half.op_GreaterThan(System.Half,System.Half),
      M:System.Half.op_LessThanOrEqual(System.Half,System.Half),
      M:System.Half.op_GreaterThanOrEqual(System.Half,System.Half),
      M:System.Half.op_Equality(System.Half,System.Half),
      M:System.Half.op_Inequality(System.Half,System.Half),
      M:System.Half.IsFinite(System.Half),
      M:System.Half.IsInfinity(System.Half),
      M:System.Half.IsNaN(System.Half),
      M:System.Half.IsNegative(System.Half),
      M:System.Half.IsNegativeInfinity(System.Half),
      M:System.Half.IsNormal(System.Half),
      M:System.Half.IsPositiveInfinity(System.Half),
      M:System.Half.IsSubnormal(System.Half),
      M:System.Half.Parse(System.String),
      M:System.Half.Parse(System.String,System.Globalization.NumberStyles),
      M:System.Half.Parse(System.String,System.IFormatProvider),
      M:System.Half.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Half.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Half.TryParse(System.String,System.Half@),
      M:System.Half.TryParse(System.ReadOnlySpan{System.Char},System.Half@),
      M:System.Half.TryParse(System.ReadOnlySpan{System.Byte},System.Half@),
      M:System.Half.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Half@),
      M:System.Half.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Half@),
      M:System.Half.AreZero(System.Half,System.Half),
      M:System.Half.IsNaNOrZero(System.Half),
      M:System.Half.StripSign(System.Half),
      M:System.Half.CompareTo(System.Object),
      M:System.Half.CompareTo(System.Half),
      M:System.Half.Equals(System.Object),
      M:System.Half.Equals(System.Half),
      M:System.Half.GetHashCode,
      M:System.Half.ToString,
      M:System.Half.ToString(System.String),
      M:System.Half.ToString(System.IFormatProvider),
      M:System.Half.ToString(System.String,System.IFormatProvider),
      M:System.Half.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Half.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Half.op_Explicit(System.Char)~System.Half,
      M:System.Half.op_Explicit(System.Decimal)~System.Half,
      M:System.Half.op_Explicit(System.Double)~System.Half,
      M:System.Half.op_Explicit(System.Int16)~System.Half,
      M:System.Half.op_Explicit(System.Int32)~System.Half,
      M:System.Half.op_Explicit(System.Int64)~System.Half,
      M:System.Half.op_Explicit(nint)~System.Half,
      M:System.Half.op_Explicit(System.Single)~System.Half,
      M:System.Half.op_Explicit(System.UInt16)~System.Half,
      M:System.Half.op_Explicit(System.UInt32)~System.Half,
      M:System.Half.op_Explicit(System.UInt64)~System.Half,
      M:System.Half.op_Explicit(nuint)~System.Half,
      M:System.Half.op_Explicit(System.Half)~System.Byte,
      M:System.Half.op_CheckedExplicit(System.Half),
      M:System.Half.op_Explicit(System.Half)~System.Char,
      M:System.Half.op_Explicit(System.Half)~System.Decimal,
      M:System.Half.op_Explicit(System.Half)~System.Int16,
      M:System.Half.op_Explicit(System.Half)~System.Int32,
      M:System.Half.op_Explicit(System.Half)~System.Int64,
      M:System.Half.op_Explicit(System.Half)~System.Int128,
      M:System.Half.op_Explicit(System.Half)~nint,
      M:System.Half.op_Explicit(System.Half)~System.SByte,
      M:System.Half.op_Explicit(System.Half)~System.UInt16,
      M:System.Half.op_Explicit(System.Half)~System.UInt32,
      M:System.Half.op_Explicit(System.Half)~System.UInt64,
      M:System.Half.op_Explicit(System.Half)~System.UInt128,
      M:System.Half.op_Explicit(System.Half)~nuint,
      M:System.Half.op_Implicit(System.Byte)~System.Half,
      M:System.Half.op_Implicit(System.SByte)~System.Half,
      M:System.Half.op_Explicit(System.Half)~System.Double,
      M:System.Half.op_Explicit(System.Half)~System.Single,
      M:System.Half.Negate(System.Half),
      M:System.Half.NormSubnormalF16Sig(System.UInt32),
      M:System.Half.CreateHalfNaN(System.Boolean,System.UInt64),
      M:System.Half.RoundPackToHalf(System.Boolean,System.Int16,System.UInt16),
      M:System.Half.ShiftRightJam(System.UInt32,System.Int32),
      M:System.Half.ShiftRightJam(System.UInt64,System.Int32),
      M:System.Half.CreateDoubleNaN(System.Boolean,System.UInt64),
      M:System.Half.CreateDouble(System.Boolean,System.UInt16,System.UInt64),
      M:System.Half.op_Addition(System.Half,System.Half),
      M:System.Half.IsPow2(System.Half),
      M:System.Half.Log2(System.Half),
      M:System.Half.System#Numerics#IBitwiseOperators{System#Half,System#Half,System#Half}#op_BitwiseAnd(System.Half,System.Half),
      M:System.Half.System#Numerics#IBitwiseOperators{System#Half,System#Half,System#Half}#op_BitwiseOr(System.Half,System.Half),
      M:System.Half.System#Numerics#IBitwiseOperators{System#Half,System#Half,System#Half}#op_ExclusiveOr(System.Half,System.Half),
      M:System.Half.System#Numerics#IBitwiseOperators{System#Half,System#Half,System#Half}#op_OnesComplement(System.Half),
      M:System.Half.op_Decrement(System.Half),
      M:System.Half.op_Division(System.Half,System.Half),
      M:System.Half.Exp(System.Half),
      M:System.Half.ExpM1(System.Half),
      M:System.Half.Exp2(System.Half),
      M:System.Half.Exp2M1(System.Half),
      M:System.Half.Exp10(System.Half),
      M:System.Half.Exp10M1(System.Half),
      M:System.Half.Ceiling(System.Half),
      M:System.Half.Floor(System.Half),
      M:System.Half.Round(System.Half),
      M:System.Half.Round(System.Half,System.Int32),
      M:System.Half.Round(System.Half,System.MidpointRounding),
      M:System.Half.Round(System.Half,System.Int32,System.MidpointRounding),
      M:System.Half.Truncate(System.Half),
      M:System.Half.System#Numerics#IFloatingPoint{System#Half}#GetExponentByteCount,
      M:System.Half.System#Numerics#IFloatingPoint{System#Half}#GetExponentShortestBitLength,
      M:System.Half.System#Numerics#IFloatingPoint{System#Half}#GetSignificandByteCount,
      M:System.Half.System#Numerics#IFloatingPoint{System#Half}#GetSignificandBitLength,
      M:System.Half.System#Numerics#IFloatingPoint{System#Half}#TryWriteExponentBigEndian(System.Span{System.Byte},System.Int32@),
      M:System.Half.System#Numerics#IFloatingPoint{System#Half}#TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@),
      M:System.Half.System#Numerics#IFloatingPoint{System#Half}#TryWriteSignificandBigEndian(System.Span{System.Byte},System.Int32@),
      M:System.Half.System#Numerics#IFloatingPoint{System#Half}#TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@),
      M:System.Half.Atan2(System.Half,System.Half),
      M:System.Half.Atan2Pi(System.Half,System.Half),
      M:System.Half.BitDecrement(System.Half),
      M:System.Half.BitIncrement(System.Half),
      M:System.Half.FusedMultiplyAdd(System.Half,System.Half,System.Half),
      M:System.Half.Ieee754Remainder(System.Half,System.Half),
      M:System.Half.ILogB(System.Half),
      M:System.Half.Lerp(System.Half,System.Half,System.Half),
      M:System.Half.ReciprocalEstimate(System.Half),
      M:System.Half.ReciprocalSqrtEstimate(System.Half),
      M:System.Half.ScaleB(System.Half,System.Int32),
      M:System.Half.Acosh(System.Half),
      M:System.Half.Asinh(System.Half),
      M:System.Half.Atanh(System.Half),
      M:System.Half.Cosh(System.Half),
      M:System.Half.Sinh(System.Half),
      M:System.Half.Tanh(System.Half),
      M:System.Half.op_Increment(System.Half),
      M:System.Half.Log(System.Half),
      M:System.Half.Log(System.Half,System.Half),
      M:System.Half.Log10(System.Half),
      M:System.Half.LogP1(System.Half),
      M:System.Half.Log2P1(System.Half),
      M:System.Half.Log10P1(System.Half),
      M:System.Half.op_Modulus(System.Half,System.Half),
      M:System.Half.op_Multiply(System.Half,System.Half),
      M:System.Half.Clamp(System.Half,System.Half,System.Half),
      M:System.Half.CopySign(System.Half,System.Half),
      M:System.Half.Max(System.Half,System.Half),
      M:System.Half.MaxNumber(System.Half,System.Half),
      M:System.Half.Min(System.Half,System.Half),
      M:System.Half.MinNumber(System.Half,System.Half),
      M:System.Half.Sign(System.Half),
      M:System.Half.Abs(System.Half),
      M:System.Half.CreateChecked``1(``0),
      M:System.Half.CreateSaturating``1(``0),
      M:System.Half.CreateTruncating``1(``0),
      M:System.Half.System#Numerics#INumberBase{System#Half}#IsCanonical(System.Half),
      M:System.Half.System#Numerics#INumberBase{System#Half}#IsComplexNumber(System.Half),
      M:System.Half.IsEvenInteger(System.Half),
      M:System.Half.System#Numerics#INumberBase{System#Half}#IsImaginaryNumber(System.Half),
      M:System.Half.IsInteger(System.Half),
      M:System.Half.IsOddInteger(System.Half),
      M:System.Half.IsPositive(System.Half),
      M:System.Half.IsRealNumber(System.Half),
      M:System.Half.System#Numerics#INumberBase{System#Half}#IsZero(System.Half),
      M:System.Half.MaxMagnitude(System.Half,System.Half),
      M:System.Half.MaxMagnitudeNumber(System.Half,System.Half),
      M:System.Half.MinMagnitude(System.Half,System.Half),
      M:System.Half.MinMagnitudeNumber(System.Half,System.Half),
      M:System.Half.System#Numerics#INumberBase{System#Half}#TryConvertFromChecked``1(``0,System.Half@),
      M:System.Half.System#Numerics#INumberBase{System#Half}#TryConvertFromSaturating``1(``0,System.Half@),
      M:System.Half.System#Numerics#INumberBase{System#Half}#TryConvertFromTruncating``1(``0,System.Half@),
      M:System.Half.TryConvertFrom``1(``0,System.Half@),
      M:System.Half.System#Numerics#INumberBase{System#Half}#TryConvertToChecked``1(System.Half,``0@),
      M:System.Half.System#Numerics#INumberBase{System#Half}#TryConvertToSaturating``1(System.Half,``0@),
      M:System.Half.System#Numerics#INumberBase{System#Half}#TryConvertToTruncating``1(System.Half,``0@),
      M:System.Half.TryConvertTo``1(System.Half,``0@),
      M:System.Half.TryParse(System.String,System.IFormatProvider,System.Half@),
      M:System.Half.Pow(System.Half,System.Half),
      M:System.Half.Cbrt(System.Half),
      M:System.Half.Hypot(System.Half,System.Half),
      M:System.Half.RootN(System.Half,System.Int32),
      M:System.Half.Sqrt(System.Half),
      M:System.Half.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Half.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Half@),
      M:System.Half.op_Subtraction(System.Half,System.Half),
      M:System.Half.Acos(System.Half),
      M:System.Half.AcosPi(System.Half),
      M:System.Half.Asin(System.Half),
      M:System.Half.AsinPi(System.Half),
      M:System.Half.Atan(System.Half),
      M:System.Half.AtanPi(System.Half),
      M:System.Half.Cos(System.Half),
      M:System.Half.CosPi(System.Half),
      M:System.Half.DegreesToRadians(System.Half),
      M:System.Half.RadiansToDegrees(System.Half),
      M:System.Half.Sin(System.Half),
      M:System.Half.SinCos(System.Half),
      M:System.Half.SinCosPi(System.Half),
      M:System.Half.SinPi(System.Half),
      M:System.Half.Tan(System.Half),
      M:System.Half.TanPi(System.Half),
      M:System.Half.op_UnaryNegation(System.Half),
      M:System.Half.op_UnaryPlus(System.Half),
      M:System.Half.Parse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Half.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Half@),
      M:System.Half.Parse(System.ReadOnlySpan{System.Byte},System.IFormatProvider),
      M:System.Half.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Half@),
      M:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#BitsToFloat(System.UInt64),
      M:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#FloatToBits(System.Half),
      M:System.Half.#ctor,
      P:System.Half.Epsilon,
      P:System.Half.PositiveInfinity,
      P:System.Half.NegativeInfinity,
      P:System.Half.NaN,
      P:System.Half.MinValue,
      P:System.Half.MaxValue,
      P:System.Half.BiasedExponent,
      P:System.Half.Exponent,
      P:System.Half.Significand,
      P:System.Half.TrailingSignificand,
      P:System.Half.System#Numerics#IAdditiveIdentity{System#Half,System#Half}#AdditiveIdentity,
      P:System.Half.System#Numerics#IBinaryNumber{System#Half}#AllBitsSet,
      P:System.Half.E,
      P:System.Half.Pi,
      P:System.Half.Tau,
      P:System.Half.NegativeZero,
      P:System.Half.MultiplicativeIdentity,
      P:System.Half.One,
      P:System.Half.System#Numerics#INumberBase{System#Half}#Radix,
      P:System.Half.Zero,
      P:System.Half.NegativeOne,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#NumberBufferLength,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#ZeroBits,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#InfinityBits,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#NormalMantissaMask,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#DenormalMantissaMask,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#MinBinaryExponent,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#MaxBinaryExponent,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#MinDecimalExponent,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#MaxDecimalExponent,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#ExponentBias,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#ExponentBits,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#OverflowDecimalExponent,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#InfinityExponent,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#NormalMantissaBits,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#DenormalMantissaBits,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#MinFastFloatDecimalExponent,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#MaxFastFloatDecimalExponent,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#MinExponentRoundToEven,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#MaxExponentRoundToEven,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#MaxExponentFastPath,
      P:System.Half.System#IBinaryFloatParseAndFormatInfo{System#Half}#MaxMantissaFastPath
    ],
    Modifiers: [
      ReadOnly
    ],
    Name: Half,
    NamespaceId: N:System,
    ParentId: N:System
  }
}