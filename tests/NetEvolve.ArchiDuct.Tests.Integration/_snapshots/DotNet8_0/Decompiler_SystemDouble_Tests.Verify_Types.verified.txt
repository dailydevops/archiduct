{
  System.Private.CoreLib, Version=8.0.0.0, T:System.Double: {
    Accessibility: Public,
    Attributes: [
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      },
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      },
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      },
      {
        FullName: System.Runtime.InteropServices.ClassInterfaceAttribute,
        Id: T:System.Runtime.InteropServices.ClassInterfaceAttribute,
        Kind: Attribute,
        Name: ClassInterfaceAttribute
      },
      {
        FullName: System.Runtime.InteropServices.ComVisibleAttribute,
        Id: T:System.Runtime.InteropServices.ComVisibleAttribute,
        Kind: Attribute,
        Name: ComVisibleAttribute
      },
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      }
    ],
    BaseTypes: [
      T:System.ValueType,
      T:System.Object
    ],
    FullName: System.Private.CoreLib, Version=8.0.0.0, T:System.Double,
    Id: T:System.Double,
    Implementations: [
      T:System.IBinaryFloatParseAndFormatInfo`1,
      T:System.Numerics.IMinMaxValue`1,
      T:System.Numerics.IBinaryFloatingPointIeee754`1,
      T:System.Numerics.IFloatingPointIeee754`1,
      T:System.Numerics.ITrigonometricFunctions`1,
      T:System.Numerics.IRootFunctions`1,
      T:System.Numerics.IPowerFunctions`1,
      T:System.Numerics.ILogarithmicFunctions`1,
      T:System.Numerics.IHyperbolicFunctions`1,
      T:System.Numerics.IFloatingPoint`1,
      T:System.Numerics.ISignedNumber`1,
      T:System.Numerics.IExponentialFunctions`1,
      T:System.Numerics.IFloatingPointConstants`1,
      T:System.Numerics.IBinaryNumber`1,
      T:System.Numerics.INumber`1,
      T:System.Numerics.INumberBase`1,
      T:System.IUtf8SpanParsable`1,
      T:System.IUtf8SpanFormattable,
      T:System.Numerics.IUnaryNegationOperators`2,
      T:System.Numerics.IUnaryPlusOperators`2,
      T:System.Numerics.ISubtractionOperators`3,
      T:System.ISpanParsable`1,
      T:System.IParsable`1,
      T:System.Numerics.IMultiplyOperators`3,
      T:System.Numerics.IMultiplicativeIdentity`2,
      T:System.Numerics.IIncrementOperators`1,
      T:System.Numerics.IDivisionOperators`3,
      T:System.Numerics.IDecrementOperators`1,
      T:System.Numerics.IAdditiveIdentity`2,
      T:System.Numerics.IAdditionOperators`3,
      T:System.Numerics.IModulusOperators`3,
      T:System.Numerics.IComparisonOperators`3,
      T:System.Numerics.IEqualityOperators`3,
      T:System.Numerics.IBitwiseOperators`3,
      T:System.IEquatable`1,
      T:System.IComparable`1,
      T:System.ISpanFormattable,
      T:System.IFormattable,
      T:System.IConvertible,
      T:System.IComparable
    ],
    InheritedMembers: [
      M:System.ValueType.Equals(System.Object),
      M:System.ValueType.CanCompareBits(System.Object),
      M:System.ValueType.GetHashCode,
      M:System.ValueType.ToString,
      M:System.Object.GetType,
      M:System.Object.MemberwiseClone,
      M:System.Object.Finalize,
      M:System.Object.ToString,
      M:System.Object.Equals(System.Object),
      M:System.Object.Equals(System.Object,System.Object),
      M:System.Object.ReferenceEquals(System.Object,System.Object),
      M:System.Object.GetHashCode
    ],
    IsNested: false,
    IsRecord: false,
    Kind: Struct,
    Members: [
      F:System.Double.m_value,
      F:System.Double.MinValue,
      F:System.Double.MaxValue,
      F:System.Double.Epsilon,
      F:System.Double.NegativeInfinity,
      F:System.Double.PositiveInfinity,
      F:System.Double.NaN,
      F:System.Double.NegativeZero,
      F:System.Double.E,
      F:System.Double.Pi,
      F:System.Double.Tau,
      M:System.Double.ExtractBiasedExponentFromBits(System.UInt64),
      M:System.Double.ExtractTrailingSignificandFromBits(System.UInt64),
      M:System.Double.IsFinite(System.Double),
      M:System.Double.IsInfinity(System.Double),
      M:System.Double.IsNaN(System.Double),
      M:System.Double.IsNegative(System.Double),
      M:System.Double.IsNegativeInfinity(System.Double),
      M:System.Double.IsNormal(System.Double),
      M:System.Double.IsPositiveInfinity(System.Double),
      M:System.Double.IsSubnormal(System.Double),
      M:System.Double.CompareTo(System.Object),
      M:System.Double.CompareTo(System.Double),
      M:System.Double.Equals(System.Object),
      M:System.Double.op_Equality(System.Double,System.Double),
      M:System.Double.op_Inequality(System.Double,System.Double),
      M:System.Double.op_LessThan(System.Double,System.Double),
      M:System.Double.op_GreaterThan(System.Double,System.Double),
      M:System.Double.op_LessThanOrEqual(System.Double,System.Double),
      M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double),
      M:System.Double.Equals(System.Double),
      M:System.Double.GetHashCode,
      M:System.Double.ToString,
      M:System.Double.ToString(System.String),
      M:System.Double.ToString(System.IFormatProvider),
      M:System.Double.ToString(System.String,System.IFormatProvider),
      M:System.Double.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Double.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Double.Parse(System.String),
      M:System.Double.Parse(System.String,System.Globalization.NumberStyles),
      M:System.Double.Parse(System.String,System.IFormatProvider),
      M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Double.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Double.TryParse(System.String,System.Double@),
      M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Double@),
      M:System.Double.TryParse(System.ReadOnlySpan{System.Byte},System.Double@),
      M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@),
      M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@),
      M:System.Double.GetTypeCode,
      M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToChar(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToByte(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider),
      M:System.Double.System#Numerics#IAdditionOperators{System#Double,System#Double,System#Double}#op_Addition(System.Double,System.Double),
      M:System.Double.IsPow2(System.Double),
      M:System.Double.Log2(System.Double),
      M:System.Double.System#Numerics#IBitwiseOperators{System#Double,System#Double,System#Double}#op_BitwiseAnd(System.Double,System.Double),
      M:System.Double.System#Numerics#IBitwiseOperators{System#Double,System#Double,System#Double}#op_BitwiseOr(System.Double,System.Double),
      M:System.Double.System#Numerics#IBitwiseOperators{System#Double,System#Double,System#Double}#op_ExclusiveOr(System.Double,System.Double),
      M:System.Double.System#Numerics#IBitwiseOperators{System#Double,System#Double,System#Double}#op_OnesComplement(System.Double),
      M:System.Double.System#Numerics#IDecrementOperators{System#Double}#op_Decrement(System.Double),
      M:System.Double.System#Numerics#IDivisionOperators{System#Double,System#Double,System#Double}#op_Division(System.Double,System.Double),
      M:System.Double.Exp(System.Double),
      M:System.Double.ExpM1(System.Double),
      M:System.Double.Exp2(System.Double),
      M:System.Double.Exp2M1(System.Double),
      M:System.Double.Exp10(System.Double),
      M:System.Double.Exp10M1(System.Double),
      M:System.Double.Ceiling(System.Double),
      M:System.Double.Floor(System.Double),
      M:System.Double.Round(System.Double),
      M:System.Double.Round(System.Double,System.Int32),
      M:System.Double.Round(System.Double,System.MidpointRounding),
      M:System.Double.Round(System.Double,System.Int32,System.MidpointRounding),
      M:System.Double.Truncate(System.Double),
      M:System.Double.System#Numerics#IFloatingPoint{System#Double}#GetExponentByteCount,
      M:System.Double.System#Numerics#IFloatingPoint{System#Double}#GetExponentShortestBitLength,
      M:System.Double.System#Numerics#IFloatingPoint{System#Double}#GetSignificandByteCount,
      M:System.Double.System#Numerics#IFloatingPoint{System#Double}#GetSignificandBitLength,
      M:System.Double.System#Numerics#IFloatingPoint{System#Double}#TryWriteExponentBigEndian(System.Span{System.Byte},System.Int32@),
      M:System.Double.System#Numerics#IFloatingPoint{System#Double}#TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@),
      M:System.Double.System#Numerics#IFloatingPoint{System#Double}#TryWriteSignificandBigEndian(System.Span{System.Byte},System.Int32@),
      M:System.Double.System#Numerics#IFloatingPoint{System#Double}#TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@),
      M:System.Double.Atan2(System.Double,System.Double),
      M:System.Double.Atan2Pi(System.Double,System.Double),
      M:System.Double.BitDecrement(System.Double),
      M:System.Double.BitIncrement(System.Double),
      M:System.Double.FusedMultiplyAdd(System.Double,System.Double,System.Double),
      M:System.Double.Ieee754Remainder(System.Double,System.Double),
      M:System.Double.ILogB(System.Double),
      M:System.Double.Lerp(System.Double,System.Double,System.Double),
      M:System.Double.ReciprocalEstimate(System.Double),
      M:System.Double.ReciprocalSqrtEstimate(System.Double),
      M:System.Double.ScaleB(System.Double,System.Int32),
      M:System.Double.Acosh(System.Double),
      M:System.Double.Asinh(System.Double),
      M:System.Double.Atanh(System.Double),
      M:System.Double.Cosh(System.Double),
      M:System.Double.Sinh(System.Double),
      M:System.Double.Tanh(System.Double),
      M:System.Double.System#Numerics#IIncrementOperators{System#Double}#op_Increment(System.Double),
      M:System.Double.Log(System.Double),
      M:System.Double.Log(System.Double,System.Double),
      M:System.Double.LogP1(System.Double),
      M:System.Double.Log2P1(System.Double),
      M:System.Double.Log10(System.Double),
      M:System.Double.Log10P1(System.Double),
      M:System.Double.System#Numerics#IModulusOperators{System#Double,System#Double,System#Double}#op_Modulus(System.Double,System.Double),
      M:System.Double.System#Numerics#IMultiplyOperators{System#Double,System#Double,System#Double}#op_Multiply(System.Double,System.Double),
      M:System.Double.Clamp(System.Double,System.Double,System.Double),
      M:System.Double.CopySign(System.Double,System.Double),
      M:System.Double.Max(System.Double,System.Double),
      M:System.Double.MaxNumber(System.Double,System.Double),
      M:System.Double.Min(System.Double,System.Double),
      M:System.Double.MinNumber(System.Double,System.Double),
      M:System.Double.Sign(System.Double),
      M:System.Double.Abs(System.Double),
      M:System.Double.CreateChecked``1(``0),
      M:System.Double.CreateSaturating``1(``0),
      M:System.Double.CreateTruncating``1(``0),
      M:System.Double.System#Numerics#INumberBase{System#Double}#IsCanonical(System.Double),
      M:System.Double.System#Numerics#INumberBase{System#Double}#IsComplexNumber(System.Double),
      M:System.Double.IsEvenInteger(System.Double),
      M:System.Double.System#Numerics#INumberBase{System#Double}#IsImaginaryNumber(System.Double),
      M:System.Double.IsInteger(System.Double),
      M:System.Double.IsOddInteger(System.Double),
      M:System.Double.IsPositive(System.Double),
      M:System.Double.IsRealNumber(System.Double),
      M:System.Double.System#Numerics#INumberBase{System#Double}#IsZero(System.Double),
      M:System.Double.MaxMagnitude(System.Double,System.Double),
      M:System.Double.MaxMagnitudeNumber(System.Double,System.Double),
      M:System.Double.MinMagnitude(System.Double,System.Double),
      M:System.Double.MinMagnitudeNumber(System.Double,System.Double),
      M:System.Double.System#Numerics#INumberBase{System#Double}#TryConvertFromChecked``1(``0,System.Double@),
      M:System.Double.System#Numerics#INumberBase{System#Double}#TryConvertFromSaturating``1(``0,System.Double@),
      M:System.Double.System#Numerics#INumberBase{System#Double}#TryConvertFromTruncating``1(``0,System.Double@),
      M:System.Double.TryConvertFrom``1(``0,System.Double@),
      M:System.Double.System#Numerics#INumberBase{System#Double}#TryConvertToChecked``1(System.Double,``0@),
      M:System.Double.System#Numerics#INumberBase{System#Double}#TryConvertToSaturating``1(System.Double,``0@),
      M:System.Double.System#Numerics#INumberBase{System#Double}#TryConvertToTruncating``1(System.Double,``0@),
      M:System.Double.TryConvertTo``1(System.Double,``0@),
      M:System.Double.TryParse(System.String,System.IFormatProvider,System.Double@),
      M:System.Double.Pow(System.Double,System.Double),
      M:System.Double.Cbrt(System.Double),
      M:System.Double.Hypot(System.Double,System.Double),
      M:System.Double.RootN(System.Double,System.Int32),
      M:System.Double.Sqrt(System.Double),
      M:System.Double.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Double@),
      M:System.Double.System#Numerics#ISubtractionOperators{System#Double,System#Double,System#Double}#op_Subtraction(System.Double,System.Double),
      M:System.Double.Acos(System.Double),
      M:System.Double.AcosPi(System.Double),
      M:System.Double.Asin(System.Double),
      M:System.Double.AsinPi(System.Double),
      M:System.Double.Atan(System.Double),
      M:System.Double.AtanPi(System.Double),
      M:System.Double.Cos(System.Double),
      M:System.Double.CosPi(System.Double),
      M:System.Double.DegreesToRadians(System.Double),
      M:System.Double.RadiansToDegrees(System.Double),
      M:System.Double.Sin(System.Double),
      M:System.Double.SinCos(System.Double),
      M:System.Double.SinCosPi(System.Double),
      M:System.Double.SinPi(System.Double),
      M:System.Double.Tan(System.Double),
      M:System.Double.TanPi(System.Double),
      M:System.Double.System#Numerics#IUnaryNegationOperators{System#Double,System#Double}#op_UnaryNegation(System.Double),
      M:System.Double.System#Numerics#IUnaryPlusOperators{System#Double,System#Double}#op_UnaryPlus(System.Double),
      M:System.Double.Parse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Double.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@),
      M:System.Double.Parse(System.ReadOnlySpan{System.Byte},System.IFormatProvider),
      M:System.Double.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Double@),
      M:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#BitsToFloat(System.UInt64),
      M:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#FloatToBits(System.Double),
      M:System.Double.CosForIntervalPiBy4(System.Double,System.Double),
      M:System.Double.SinForIntervalPiBy4(System.Double,System.Double),
      M:System.Double.TanForIntervalPiBy4(System.Double,System.Double,System.Boolean),
      M:System.Double.#ctor,
      P:System.Double.BiasedExponent,
      P:System.Double.Exponent,
      P:System.Double.Significand,
      P:System.Double.TrailingSignificand,
      P:System.Double.System#Numerics#IAdditiveIdentity{System#Double,System#Double}#AdditiveIdentity,
      P:System.Double.System#Numerics#IBinaryNumber{System#Double}#AllBitsSet,
      P:System.Double.System#Numerics#IFloatingPointConstants{System#Double}#E,
      P:System.Double.System#Numerics#IFloatingPointConstants{System#Double}#Pi,
      P:System.Double.System#Numerics#IFloatingPointConstants{System#Double}#Tau,
      P:System.Double.System#Numerics#IFloatingPointIeee754{System#Double}#Epsilon,
      P:System.Double.System#Numerics#IFloatingPointIeee754{System#Double}#NaN,
      P:System.Double.System#Numerics#IFloatingPointIeee754{System#Double}#NegativeInfinity,
      P:System.Double.System#Numerics#IFloatingPointIeee754{System#Double}#NegativeZero,
      P:System.Double.System#Numerics#IFloatingPointIeee754{System#Double}#PositiveInfinity,
      P:System.Double.System#Numerics#IMinMaxValue{System#Double}#MinValue,
      P:System.Double.System#Numerics#IMinMaxValue{System#Double}#MaxValue,
      P:System.Double.System#Numerics#IMultiplicativeIdentity{System#Double,System#Double}#MultiplicativeIdentity,
      P:System.Double.System#Numerics#INumberBase{System#Double}#One,
      P:System.Double.System#Numerics#INumberBase{System#Double}#Radix,
      P:System.Double.System#Numerics#INumberBase{System#Double}#Zero,
      P:System.Double.System#Numerics#ISignedNumber{System#Double}#NegativeOne,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#NumberBufferLength,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#ZeroBits,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#InfinityBits,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#NormalMantissaMask,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#DenormalMantissaMask,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#MinBinaryExponent,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#MaxBinaryExponent,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#MinDecimalExponent,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#MaxDecimalExponent,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#ExponentBias,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#ExponentBits,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#OverflowDecimalExponent,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#InfinityExponent,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#NormalMantissaBits,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#DenormalMantissaBits,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#MinFastFloatDecimalExponent,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#MaxFastFloatDecimalExponent,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#MinExponentRoundToEven,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#MaxExponentRoundToEven,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#MaxExponentFastPath,
      P:System.Double.System#IBinaryFloatParseAndFormatInfo{System#Double}#MaxMantissaFastPath
    ],
    Modifiers: [
      ReadOnly
    ],
    Name: Double,
    NamespaceId: N:System,
    ParentId: N:System
  }
}