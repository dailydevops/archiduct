{
  T:System.Double: {
    Accessibility: Public,
    Attributes: [
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.Runtime.InteropServices.ClassInterfaceAttribute,
        Id: T:System.Runtime.InteropServices.ClassInterfaceAttribute,
        Kind: Attribute,
        Name: ClassInterfaceAttribute
      },
      {
        FullName: System.Runtime.InteropServices.ComVisibleAttribute,
        Id: T:System.Runtime.InteropServices.ComVisibleAttribute,
        Kind: Attribute,
        Name: ComVisibleAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      }
    ],
    BaseTypes: [
      T:System.ValueType,
      T:System.Object
    ],
    FullName: System.Private.CoreLib, Version=x.x.x.x, T:System.Double,
    Id: T:System.Double,
    Implementations: [
      T:System.IMinMaxValue`1,
      T:System.IBinaryFloatingPoint`1,
      T:System.IFloatingPoint`1,
      T:System.ISignedNumber`1,
      T:System.IBinaryNumber`1,
      T:System.INumber`1,
      T:System.IUnaryPlusOperators`2,
      T:System.IUnaryNegationOperators`2,
      T:System.ISubtractionOperators`3,
      T:System.ISpanParseable`1,
      T:System.IParseable`1,
      T:System.IMultiplyOperators`3,
      T:System.IMultiplicativeIdentity`2,
      T:System.IModulusOperators`3,
      T:System.IIncrementOperators`1,
      T:System.IDivisionOperators`3,
      T:System.IDecrementOperators`1,
      T:System.IComparisonOperators`2,
      T:System.IEqualityOperators`2,
      T:System.IAdditiveIdentity`2,
      T:System.IAdditionOperators`3,
      T:System.IBitwiseOperators`3,
      T:System.IEquatable`1,
      T:System.IComparable`1,
      T:System.ISpanFormattable,
      T:System.IFormattable,
      T:System.IConvertible,
      T:System.IComparable
    ],
    InheritedMembers: [
      M:System.ValueType.Equals(System.Object),
      M:System.ValueType.CanCompareBits(System.Object),
      M:System.ValueType.FastEqualsCheck(System.Object,System.Object),
      M:System.ValueType.GetHashCode,
      M:System.ValueType.GetHashCodeOfPtr(System.IntPtr),
      M:System.ValueType.ToString,
      M:System.Object.GetType,
      M:System.Object.MemberwiseClone,
      M:System.Object.Finalize,
      M:System.Object.ToString,
      M:System.Object.Equals(System.Object),
      M:System.Object.Equals(System.Object,System.Object),
      M:System.Object.ReferenceEquals(System.Object,System.Object),
      M:System.Object.GetHashCode
    ],
    IsNested: false,
    IsRecord: false,
    Kind: Struct,
    Members: [
      F:System.Double.m_value,
      F:System.Double.MinValue,
      F:System.Double.MaxValue,
      F:System.Double.Epsilon,
      F:System.Double.NegativeInfinity,
      F:System.Double.PositiveInfinity,
      F:System.Double.NaN,
      M:System.Double.IsFinite(System.Double),
      M:System.Double.IsInfinity(System.Double),
      M:System.Double.IsNaN(System.Double),
      M:System.Double.IsNegative(System.Double),
      M:System.Double.IsNegativeInfinity(System.Double),
      M:System.Double.IsNormal(System.Double),
      M:System.Double.IsPositiveInfinity(System.Double),
      M:System.Double.IsSubnormal(System.Double),
      M:System.Double.ExtractExponentFromBits(System.UInt64),
      M:System.Double.ExtractSignificandFromBits(System.UInt64),
      M:System.Double.CompareTo(System.Object),
      M:System.Double.CompareTo(System.Double),
      M:System.Double.Equals(System.Object),
      M:System.Double.op_Equality(System.Double,System.Double),
      M:System.Double.op_Inequality(System.Double,System.Double),
      M:System.Double.op_LessThan(System.Double,System.Double),
      M:System.Double.op_GreaterThan(System.Double,System.Double),
      M:System.Double.op_LessThanOrEqual(System.Double,System.Double),
      M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double),
      M:System.Double.Equals(System.Double),
      M:System.Double.GetHashCode,
      M:System.Double.ToString,
      M:System.Double.ToString(System.String),
      M:System.Double.ToString(System.IFormatProvider),
      M:System.Double.ToString(System.String,System.IFormatProvider),
      M:System.Double.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Double.Parse(System.String),
      M:System.Double.Parse(System.String,System.Globalization.NumberStyles),
      M:System.Double.Parse(System.String,System.IFormatProvider),
      M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Double.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Double.TryParse(System.String,System.Double@),
      M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Double@),
      M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@),
      M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@),
      M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.Globalization.NumberFormatInfo,System.Double@),
      M:System.Double.GetTypeCode,
      M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToChar(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToByte(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider),
      M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider),
      M:System.Double.System#IAdditionOperators{System#Double,System#Double,System#Double}#op_Addition(System.Double,System.Double),
      M:System.Double.System#IBinaryNumber{System#Double}#IsPow2(System.Double),
      M:System.Double.System#IBinaryNumber{System#Double}#Log2(System.Double),
      M:System.Double.System#IBitwiseOperators{System#Double,System#Double,System#Double}#op_BitwiseAnd(System.Double,System.Double),
      M:System.Double.System#IBitwiseOperators{System#Double,System#Double,System#Double}#op_BitwiseOr(System.Double,System.Double),
      M:System.Double.System#IBitwiseOperators{System#Double,System#Double,System#Double}#op_ExclusiveOr(System.Double,System.Double),
      M:System.Double.System#IBitwiseOperators{System#Double,System#Double,System#Double}#op_OnesComplement(System.Double),
      M:System.Double.System#IComparisonOperators{System#Double,System#Double}#op_LessThan(System.Double,System.Double),
      M:System.Double.System#IComparisonOperators{System#Double,System#Double}#op_LessThanOrEqual(System.Double,System.Double),
      M:System.Double.System#IComparisonOperators{System#Double,System#Double}#op_GreaterThan(System.Double,System.Double),
      M:System.Double.System#IComparisonOperators{System#Double,System#Double}#op_GreaterThanOrEqual(System.Double,System.Double),
      M:System.Double.System#IDecrementOperators{System#Double}#op_Decrement(System.Double),
      M:System.Double.System#IDivisionOperators{System#Double,System#Double,System#Double}#op_Division(System.Double,System.Double),
      M:System.Double.System#IEqualityOperators{System#Double,System#Double}#op_Equality(System.Double,System.Double),
      M:System.Double.System#IEqualityOperators{System#Double,System#Double}#op_Inequality(System.Double,System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Acos(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Acosh(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Asin(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Asinh(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Atan(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Atan2(System.Double,System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Atanh(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#BitIncrement(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#BitDecrement(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Cbrt(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Ceiling(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#CopySign(System.Double,System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Cos(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Cosh(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Exp(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Floor(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#FusedMultiplyAdd(System.Double,System.Double,System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#IEEERemainder(System.Double,System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#ILogB``1(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Log(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Log(System.Double,System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Log2(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Log10(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#MaxMagnitude(System.Double,System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#MinMagnitude(System.Double,System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Pow(System.Double,System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Round(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Round``1(System.Double,``0),
      M:System.Double.System#IFloatingPoint{System#Double}#Round(System.Double,System.MidpointRounding),
      M:System.Double.System#IFloatingPoint{System#Double}#Round``1(System.Double,``0,System.MidpointRounding),
      M:System.Double.System#IFloatingPoint{System#Double}#ScaleB``1(System.Double,``0),
      M:System.Double.System#IFloatingPoint{System#Double}#Sin(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Sinh(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Sqrt(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Tan(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Tanh(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#Truncate(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#IsFinite(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#IsInfinity(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#IsNaN(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#IsNegative(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#IsNegativeInfinity(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#IsNormal(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#IsPositiveInfinity(System.Double),
      M:System.Double.System#IFloatingPoint{System#Double}#IsSubnormal(System.Double),
      M:System.Double.System#IIncrementOperators{System#Double}#op_Increment(System.Double),
      M:System.Double.System#IModulusOperators{System#Double,System#Double,System#Double}#op_Modulus(System.Double,System.Double),
      M:System.Double.System#IMultiplyOperators{System#Double,System#Double,System#Double}#op_Multiply(System.Double,System.Double),
      M:System.Double.System#INumber{System#Double}#Abs(System.Double),
      M:System.Double.System#INumber{System#Double}#Clamp(System.Double,System.Double,System.Double),
      M:System.Double.System#INumber{System#Double}#Create``1(``0),
      M:System.Double.System#INumber{System#Double}#CreateSaturating``1(``0),
      M:System.Double.System#INumber{System#Double}#CreateTruncating``1(``0),
      M:System.Double.System#INumber{System#Double}#DivRem(System.Double,System.Double),
      M:System.Double.System#INumber{System#Double}#Max(System.Double,System.Double),
      M:System.Double.System#INumber{System#Double}#Min(System.Double,System.Double),
      M:System.Double.System#INumber{System#Double}#Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Double.System#INumber{System#Double}#Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Double.System#INumber{System#Double}#Sign(System.Double),
      M:System.Double.System#INumber{System#Double}#TryCreate``1(``0,System.Double@),
      M:System.Double.System#INumber{System#Double}#TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@),
      M:System.Double.System#INumber{System#Double}#TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@),
      M:System.Double.System#IParseable{System#Double}#Parse(System.String,System.IFormatProvider),
      M:System.Double.System#IParseable{System#Double}#TryParse(System.String,System.IFormatProvider,System.Double@),
      M:System.Double.System#ISpanParseable{System#Double}#Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Double.System#ISpanParseable{System#Double}#TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Double@),
      M:System.Double.System#ISubtractionOperators{System#Double,System#Double,System#Double}#op_Subtraction(System.Double,System.Double),
      M:System.Double.System#IUnaryNegationOperators{System#Double,System#Double}#op_UnaryNegation(System.Double),
      M:System.Double.System#IUnaryPlusOperators{System#Double,System#Double}#op_UnaryPlus(System.Double),
      M:System.Double.#ctor,
      P:System.Double.System#IAdditiveIdentity{System#Double,System#Double}#AdditiveIdentity,
      P:System.Double.System#IFloatingPoint{System#Double}#E,
      P:System.Double.System#IFloatingPoint{System#Double}#Epsilon,
      P:System.Double.System#IFloatingPoint{System#Double}#NaN,
      P:System.Double.System#IFloatingPoint{System#Double}#NegativeInfinity,
      P:System.Double.System#IFloatingPoint{System#Double}#NegativeZero,
      P:System.Double.System#IFloatingPoint{System#Double}#Pi,
      P:System.Double.System#IFloatingPoint{System#Double}#PositiveInfinity,
      P:System.Double.System#IFloatingPoint{System#Double}#Tau,
      P:System.Double.System#IMinMaxValue{System#Double}#MinValue,
      P:System.Double.System#IMinMaxValue{System#Double}#MaxValue,
      P:System.Double.System#IMultiplicativeIdentity{System#Double,System#Double}#MultiplicativeIdentity,
      P:System.Double.System#INumber{System#Double}#One,
      P:System.Double.System#INumber{System#Double}#Zero,
      P:System.Double.System#ISignedNumber{System#Double}#NegativeOne
    ],
    Modifiers: [
      ReadOnly
    ],
    Name: Double,
    NamespaceId: N:System,
    ParentId: N:System
  }
}