{
  T:System.Char: {
    Accessibility: Public,
    Attributes: [
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Id: T:System.Runtime.CompilerServices.TypeForwardedFromAttribute,
        Kind: Attribute,
        Name: TypeForwardedFromAttribute
      },
      {
        FullName: System.Runtime.InteropServices.ClassInterfaceAttribute,
        Id: T:System.Runtime.InteropServices.ClassInterfaceAttribute,
        Kind: Attribute,
        Name: ClassInterfaceAttribute
      },
      {
        FullName: System.Runtime.InteropServices.ComVisibleAttribute,
        Id: T:System.Runtime.InteropServices.ComVisibleAttribute,
        Kind: Attribute,
        Name: ComVisibleAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      },
      {
        FullName: System.SerializableAttribute,
        Id: T:System.SerializableAttribute,
        Kind: Attribute,
        Name: SerializableAttribute
      }
    ],
    BaseTypes: [
      T:System.ValueType,
      T:System.Object
    ],
    FullName: System.Private.CoreLib, Version=x.x.x.x, T:System.Char,
    Id: T:System.Char,
    Implementations: [
      T:System.IUnsignedNumber`1,
      T:System.IMinMaxValue`1,
      T:System.IBinaryInteger`1,
      T:System.IShiftOperators`2,
      T:System.IBinaryNumber`1,
      T:System.INumber`1,
      T:System.IUnaryPlusOperators`2,
      T:System.IUnaryNegationOperators`2,
      T:System.ISubtractionOperators`3,
      T:System.ISpanParseable`1,
      T:System.IParseable`1,
      T:System.IMultiplyOperators`3,
      T:System.IMultiplicativeIdentity`2,
      T:System.IModulusOperators`3,
      T:System.IIncrementOperators`1,
      T:System.IDivisionOperators`3,
      T:System.IDecrementOperators`1,
      T:System.IComparisonOperators`2,
      T:System.IEqualityOperators`2,
      T:System.IAdditiveIdentity`2,
      T:System.IAdditionOperators`3,
      T:System.IBitwiseOperators`3,
      T:System.ISpanFormattable,
      T:System.IFormattable,
      T:System.IConvertible,
      T:System.IEquatable`1,
      T:System.IComparable`1,
      T:System.IComparable
    ],
    InheritedMembers: [
      M:System.ValueType.Equals(System.Object),
      M:System.ValueType.CanCompareBits(System.Object),
      M:System.ValueType.FastEqualsCheck(System.Object,System.Object),
      M:System.ValueType.GetHashCode,
      M:System.ValueType.GetHashCodeOfPtr(System.IntPtr),
      M:System.ValueType.ToString,
      M:System.Object.GetType,
      M:System.Object.MemberwiseClone,
      M:System.Object.Finalize,
      M:System.Object.ToString,
      M:System.Object.Equals(System.Object),
      M:System.Object.Equals(System.Object,System.Object),
      M:System.Object.ReferenceEquals(System.Object,System.Object),
      M:System.Object.GetHashCode
    ],
    IsNested: false,
    IsRecord: false,
    Kind: Struct,
    Members: [
      F:System.Char.m_value,
      F:System.Char.MaxValue,
      F:System.Char.MinValue,
      M:System.Char.IsLatin1(System.Char),
      M:System.Char.IsAscii(System.Char),
      M:System.Char.GetLatin1UnicodeCategory(System.Char),
      M:System.Char.GetHashCode,
      M:System.Char.Equals(System.Object),
      M:System.Char.Equals(System.Char),
      M:System.Char.CompareTo(System.Object),
      M:System.Char.CompareTo(System.Char),
      M:System.Char.ToString,
      M:System.Char.ToString(System.IFormatProvider),
      M:System.Char.ToString(System.Char),
      M:System.Char.System#ISpanFormattable#TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Char.System#IFormattable#ToString(System.String,System.IFormatProvider),
      M:System.Char.Parse(System.String),
      M:System.Char.TryParse(System.String,System.Char@),
      M:System.Char.IsDigit(System.Char),
      M:System.Char.IsInRange(System.Char,System.Char,System.Char),
      M:System.Char.IsInRange(System.Globalization.UnicodeCategory,System.Globalization.UnicodeCategory,System.Globalization.UnicodeCategory),
      M:System.Char.CheckLetter(System.Globalization.UnicodeCategory),
      M:System.Char.IsLetter(System.Char),
      M:System.Char.IsWhiteSpaceLatin1(System.Char),
      M:System.Char.IsWhiteSpace(System.Char),
      M:System.Char.IsUpper(System.Char),
      M:System.Char.IsLower(System.Char),
      M:System.Char.CheckPunctuation(System.Globalization.UnicodeCategory),
      M:System.Char.IsPunctuation(System.Char),
      M:System.Char.CheckLetterOrDigit(System.Globalization.UnicodeCategory),
      M:System.Char.IsLetterOrDigit(System.Char),
      M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo),
      M:System.Char.ToUpper(System.Char),
      M:System.Char.ToUpperInvariant(System.Char),
      M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo),
      M:System.Char.ToLower(System.Char),
      M:System.Char.ToLowerInvariant(System.Char),
      M:System.Char.GetTypeCode,
      M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToChar(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToByte(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider),
      M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider),
      M:System.Char.IsControl(System.Char),
      M:System.Char.IsControl(System.String,System.Int32),
      M:System.Char.IsDigit(System.String,System.Int32),
      M:System.Char.IsLetter(System.String,System.Int32),
      M:System.Char.IsLetterOrDigit(System.String,System.Int32),
      M:System.Char.IsLower(System.String,System.Int32),
      M:System.Char.CheckNumber(System.Globalization.UnicodeCategory),
      M:System.Char.IsNumber(System.Char),
      M:System.Char.IsNumber(System.String,System.Int32),
      M:System.Char.IsPunctuation(System.String,System.Int32),
      M:System.Char.CheckSeparator(System.Globalization.UnicodeCategory),
      M:System.Char.IsSeparatorLatin1(System.Char),
      M:System.Char.IsSeparator(System.Char),
      M:System.Char.IsSeparator(System.String,System.Int32),
      M:System.Char.IsSurrogate(System.Char),
      M:System.Char.IsSurrogate(System.String,System.Int32),
      M:System.Char.CheckSymbol(System.Globalization.UnicodeCategory),
      M:System.Char.IsSymbol(System.Char),
      M:System.Char.IsSymbol(System.String,System.Int32),
      M:System.Char.IsUpper(System.String,System.Int32),
      M:System.Char.IsWhiteSpace(System.String,System.Int32),
      M:System.Char.GetUnicodeCategory(System.Char),
      M:System.Char.GetUnicodeCategory(System.String,System.Int32),
      M:System.Char.GetNumericValue(System.Char),
      M:System.Char.GetNumericValue(System.String,System.Int32),
      M:System.Char.IsHighSurrogate(System.Char),
      M:System.Char.IsHighSurrogate(System.String,System.Int32),
      M:System.Char.IsLowSurrogate(System.Char),
      M:System.Char.IsLowSurrogate(System.String,System.Int32),
      M:System.Char.IsSurrogatePair(System.String,System.Int32),
      M:System.Char.IsSurrogatePair(System.Char,System.Char),
      M:System.Char.ConvertFromUtf32(System.Int32),
      M:System.Char.ConvertToUtf32(System.Char,System.Char),
      M:System.Char.ConvertToUtf32_ThrowInvalidArgs(System.UInt32),
      M:System.Char.ConvertToUtf32(System.String,System.Int32),
      M:System.Char.System#IAdditionOperators{System#Char,System#Char,System#Char}#op_Addition(System.Char,System.Char),
      M:System.Char.System#IBinaryInteger{System#Char}#LeadingZeroCount(System.Char),
      M:System.Char.System#IBinaryInteger{System#Char}#PopCount(System.Char),
      M:System.Char.System#IBinaryInteger{System#Char}#RotateLeft(System.Char,System.Int32),
      M:System.Char.System#IBinaryInteger{System#Char}#RotateRight(System.Char,System.Int32),
      M:System.Char.System#IBinaryInteger{System#Char}#TrailingZeroCount(System.Char),
      M:System.Char.System#IBinaryNumber{System#Char}#IsPow2(System.Char),
      M:System.Char.System#IBinaryNumber{System#Char}#Log2(System.Char),
      M:System.Char.System#IBitwiseOperators{System#Char,System#Char,System#Char}#op_BitwiseAnd(System.Char,System.Char),
      M:System.Char.System#IBitwiseOperators{System#Char,System#Char,System#Char}#op_BitwiseOr(System.Char,System.Char),
      M:System.Char.System#IBitwiseOperators{System#Char,System#Char,System#Char}#op_ExclusiveOr(System.Char,System.Char),
      M:System.Char.System#IBitwiseOperators{System#Char,System#Char,System#Char}#op_OnesComplement(System.Char),
      M:System.Char.System#IComparisonOperators{System#Char,System#Char}#op_LessThan(System.Char,System.Char),
      M:System.Char.System#IComparisonOperators{System#Char,System#Char}#op_LessThanOrEqual(System.Char,System.Char),
      M:System.Char.System#IComparisonOperators{System#Char,System#Char}#op_GreaterThan(System.Char,System.Char),
      M:System.Char.System#IComparisonOperators{System#Char,System#Char}#op_GreaterThanOrEqual(System.Char,System.Char),
      M:System.Char.System#IDecrementOperators{System#Char}#op_Decrement(System.Char),
      M:System.Char.System#IDivisionOperators{System#Char,System#Char,System#Char}#op_Division(System.Char,System.Char),
      M:System.Char.System#IEqualityOperators{System#Char,System#Char}#op_Equality(System.Char,System.Char),
      M:System.Char.System#IEqualityOperators{System#Char,System#Char}#op_Inequality(System.Char,System.Char),
      M:System.Char.System#IIncrementOperators{System#Char}#op_Increment(System.Char),
      M:System.Char.System#IModulusOperators{System#Char,System#Char,System#Char}#op_Modulus(System.Char,System.Char),
      M:System.Char.System#IMultiplyOperators{System#Char,System#Char,System#Char}#op_Multiply(System.Char,System.Char),
      M:System.Char.System#INumber{System#Char}#Abs(System.Char),
      M:System.Char.System#INumber{System#Char}#Clamp(System.Char,System.Char,System.Char),
      M:System.Char.System#INumber{System#Char}#Create``1(``0),
      M:System.Char.System#INumber{System#Char}#CreateSaturating``1(``0),
      M:System.Char.System#INumber{System#Char}#CreateTruncating``1(``0),
      M:System.Char.System#INumber{System#Char}#DivRem(System.Char,System.Char),
      M:System.Char.System#INumber{System#Char}#Max(System.Char,System.Char),
      M:System.Char.System#INumber{System#Char}#Min(System.Char,System.Char),
      M:System.Char.System#INumber{System#Char}#Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Char.System#INumber{System#Char}#Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider),
      M:System.Char.System#INumber{System#Char}#Sign(System.Char),
      M:System.Char.System#INumber{System#Char}#TryCreate``1(``0,System.Char@),
      M:System.Char.System#INumber{System#Char}#TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Char@),
      M:System.Char.System#INumber{System#Char}#TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Char@),
      M:System.Char.System#IParseable{System#Char}#Parse(System.String,System.IFormatProvider),
      M:System.Char.System#IParseable{System#Char}#TryParse(System.String,System.IFormatProvider,System.Char@),
      M:System.Char.System#IShiftOperators{System#Char,System#Char}#op_LeftShift(System.Char,System.Int32),
      M:System.Char.System#IShiftOperators{System#Char,System#Char}#op_RightShift(System.Char,System.Int32),
      M:System.Char.System#ISpanParseable{System#Char}#Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider),
      M:System.Char.System#ISpanParseable{System#Char}#TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Char@),
      M:System.Char.System#ISubtractionOperators{System#Char,System#Char,System#Char}#op_Subtraction(System.Char,System.Char),
      M:System.Char.System#IUnaryNegationOperators{System#Char,System#Char}#op_UnaryNegation(System.Char),
      M:System.Char.System#IUnaryPlusOperators{System#Char,System#Char}#op_UnaryPlus(System.Char),
      M:System.Char.#ctor,
      P:System.Char.Latin1CharInfo,
      P:System.Char.System#IAdditiveIdentity{System#Char,System#Char}#AdditiveIdentity,
      P:System.Char.System#IMinMaxValue{System#Char}#MinValue,
      P:System.Char.System#IMinMaxValue{System#Char}#MaxValue,
      P:System.Char.System#IMultiplicativeIdentity{System#Char,System#Char}#MultiplicativeIdentity,
      P:System.Char.System#INumber{System#Char}#One,
      P:System.Char.System#INumber{System#Char}#Zero
    ],
    Modifiers: [
      ReadOnly
    ],
    Name: Char,
    NamespaceId: N:System,
    ParentId: N:System
  }
}